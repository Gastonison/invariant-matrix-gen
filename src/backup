from algorithm_utils import *
import time
import bisect


n = 2
p = (2,2)
matrix_data = {"rows": 0, "cols": 0}
enumeration_direct_sum_array = []
enumeration_direct_sum_dictionary = {}
enumeration_dictionary = {}
reference_dictionary = {}
result_dictionary = {}
result_array = []
array_result = []

bsets = []
asets = []
eqn_row = 0

# Returns matrix / dictionary generated by relations
def generate_matrix(n_val, p_val):
    #sets global variables
    global n, p, result_matrix, result_dictionary, eqn_row
    n = n_val
    p = p_val
    eqn_row = 0
    generate_direct_sum_permutation_enumeration()
    generate_enumerated_permutation()
    # print(enumeration_dictionary)
    matrix_data = generate_initial_matrix()
    result_dictionary = generate_initial_dictionary()
    
    populate_matrix()
    return matrix_data, result_dictionary, array_result

def generate_direct_sum_permutation_enumeration():
    global enumeration_direct_sum_array
    enumeration_direct_sum_array = direct_sum_combinations(p)

def generate_enumerated_permutation():
    timerValue = time.time()
    global enumeration_dictionary
    count = 0
    total = 1
    for prime in p:
        total *= prime

    
    for aset in subsets(total+n-1,n):
        a = map_subset(aset)
        key = tuple([enumeration_direct_sum_array[i] for i in a]) 
        enumeration_dictionary[key] = count
        count += 1
    # print("Populating enumerated list took {} seconds".format(time.time() % timerValue))
    # print(enumeration_dictionary)
    # print(enumeration_direct_sum_array)
    
generate_direct_sum_permutation_enumeration()
generate_enumerated_permutation()

def enumerate_permutation(perm):
    return enumeration_dictionary[tuple(sorted(perm))]

# MARK - This is where the matrix is changed to any other data structure
# Generates initial values for the Matrix
def generate_initial_matrix():
    prod = p_prod(p)
    nvars=binomial(prod-1+n,n)
    neqs=1+sum(binomial(prod-1+k,k)*binomial(prod-1+n-k,n-k) for k in [2])
    return {"rows": int(neqs),"cols": int(nvars)}

# Generates initial values for the Dictionary
def generate_initial_dictionary():
    return {(0,0):1}

def generate_reference_columns(k):
    global eqn_row, result_dictionary, reference_dictionary
    b = map_enumerations(map_subset(bsets[0]))
    for aset in asets:
        eqn_row=eqn_row+1
        a = map_enumerations(map_subset(aset))
        j = enumerate_permutation(a+b)
        # replace this below vv with setting the columns that we've saved
        result_dictionary[(j, eqn_row)] = 1
        for i in range(k):
            a_generated = [vector_mod_subtract(a[i1], a[i], p) for i1 in range(k)]
            a_generated[i] = a[i]
            calculate_column_values(a_generated, b, k, i, a)

    reference_dictionary = {}
    items = sorted(result_dictionary.items())
    for key, val in items:
        if val != 0:
            column, row = key
            if column in reference_dictionary:
                reference_dictionary[column].append((row,val))
            else:
                reference_dictionary[column] = [(row,val)]

    result_dictionary = {}
    eqn_row = 0 

# Sets column values
def calculate_column_values(a, b, k, i, a_original):
    j= enumerate_permutation(a+b)    
    if (j, eqn_row) in result_dictionary:
        result_dictionary[(j, eqn_row)] = result_dictionary[(j, eqn_row)]-1/a.count(a[i])
    else:
        result_dictionary[(j, eqn_row)] = -1/a.count(a[i])
            
# # Iterates through all permutations of a, b
def iterate_permutations(k):

    global eqn_row, result_string, array_result
    array_result = [[] for i in range((len(asets)*len(bsets))+1)]
    iteration_chunk = len(asets)
    eqn_chunk = 0
    for bset in bsets:
        b = map_enumerations(map_subset(bset))
        initial_row = iteration_chunk*eqn_chunk
        for aset in asets:
            eqn_row=eqn_row+1
            a = map_enumerations(map_subset(aset))
            j = enumerate_permutation(a+b)
            for item in reference_dictionary[eqn_row - initial_row - 1]:
                row, val = item
                # print(initial_row + row)
                bisect.insort(array_result[initial_row + row], (j,val))
                # result_dictionary[(initial_row + row, j)] = val
        # generate_sms_dynamic(results)
        # results = {}
        # print("--------")
        eqn_chunk += 1







    # global eqn_row
    # prod = p_prod(p)
    # for aset in asets:
    #     a = map_enumerations(map_subset(aset))  ##generates set of enumerations now for d-sum (instead of values)
    #     for bset in bsets:
    #         eqn_row=eqn_row+1
    #         b = map_enumerations(map_subset(bset))
    #         j=enumerate_permutation(a+b)
    #         result_dictionary[(eqn_row, j)] = 1
    #         calculate_column_values(a, b, k)
    #         handle_permutation(mapped_a, mapped_b, k)

def map_enumerations(arr):
    return [enumeration_direct_sum_array[i] for i in arr]

# Starts process of populating matrix / dictionary
def populate_matrix():
    # for k in [2]:
    k = 2
    global bsets, asets
    prod = p_prod(p)
    bsets = subsets(prod-1+n-k,n-k)
    asets = subsets(prod-1+k,k)
    generate_reference_columns(2)
    iterate_permutations(k)
