from algorithm_utils import *
import time
import bisect

n = 0
p = 0
matrix_data = {"rows": 0, "cols": 0}
enumeration_dictionary = {}
result_dictionary = {}
reference_dictionary = {}
array_result = []
result_array = []
result_string = ""
eqn_row = 0

bsets = []
asets = []

# Returns matrix / dictionary generated by relations
def generate_matrix(n_val, p_val):
    #sets global variables
    global n, p, result_matrix, result_dictionary, eqn_row
    n = n_val
    p = p_val
    eqn_row = 0
    generate_enumerated_permutation()
    matrix_data = generate_initial_matrix()
    result_dictionary = generate_initial_dictionary()
    
    populate_matrix()
    return matrix_data, result_dictionary, array_result

def generate_enumerated_permutation():
    timerValue = time.time()

    global enumeration_dictionary
    count = 0
    for aset in subsets(p-1+n,n):
        a = map_subset(aset)
        enumeration_dictionary[tuple(a)] = count
        count += 1
    # print("Populating enumerated list took {} seconds".format(time.time() % timerValue))
        
def enumerate_permutation(perm):
    return enumeration_dictionary[tuple(sorted(perm))]


# MARK - This is where the matrix is changed to any other data structure
# Generates initial values for the Matrix
def generate_initial_matrix():
    nvars=binomial(p-1+n,n)
    neqs=1+sum(binomial(p-1+k,k)*binomial(p-1+n-k,n-k) for k in [2])
    return {"rows": int(neqs),"cols": int(nvars)}

# Generates initial values for the Dictionary
def generate_initial_dictionary():
    return {(0,0):1}

# Sets column values
def calculate_column_values(a, b, k, i, a_original):
    j = enumerate_permutation(a+b)
    if (j, eqn_row) in result_dictionary:
        result_dictionary[(j, eqn_row)] = result_dictionary[(j, eqn_row)]-1/a_original.count(a[i])
    else:
        result_dictionary[(j, eqn_row)] = -1/a_original.count(a[i])

def generate_reference_columns(k):
    global eqn_row, result_dictionary, reference_dictionary
    b = map_subset(bsets[0])
    for aset in asets:
        eqn_row=eqn_row+1
        a = map_subset(aset)
        j = enumerate_permutation(a+b)
        # replace this below vv with setting the columns that we've saved
        result_dictionary[(j, eqn_row)] = 1
        for i in range(k):
            a_generated = [(a[i1]-a[i])%p for i1 in range(k)]
            a_generated[i] = a[i]
            calculate_column_values(a_generated, b, k, i, a)

    reference_dictionary = {}
    items = sorted(result_dictionary.items())
    for key, val in items:
        if val != 0:
            column, row = key
            if column in reference_dictionary:
                reference_dictionary[column].append((row,val))
            else:
                reference_dictionary[column] = [(row,val)]

    result_dictionary = {}
    eqn_row = 0    
            
# # Iterates through all permutations of a, b
def iterate_permutations(k):

    global eqn_row, result_string, array_result
    array_result = [[] for i in range((len(asets)*len(bsets))+1)]
    iteration_chunk = len(asets)
    eqn_chunk = 0
    for bset in bsets:
        b = map_subset(bset)
        initial_row = iteration_chunk*eqn_chunk
        for aset in asets:
            eqn_row=eqn_row+1
            a = map_subset(aset)
            j = enumerate_permutation(a+b)
            for item in reference_dictionary[eqn_row - initial_row - 1]:
                row, val = item
                # print(initial_row + row)
                bisect.insort(array_result[initial_row + row], (j,val))
                # result_dictionary[(initial_row + row, j)] = val
        # generate_sms_dynamic(results)
        # results = {}
        # print("--------")
        eqn_chunk += 1
    # print(array_result)
    
    # create_sms_file(matrix_data, result_string)


# def generate_sms_dynamic(dic):
#     global result_string
#     items = sorted(dic.items())
#     # result_string = ""
#     for key, val in items:
#         if val != 0:
#             result_string += "{} {} {}\n".format(key[0]+1, key[1]+1, val)
#     # result_string += "0 0 0\n"

#     # create_sms_file(result_string)

# def create_sms_file(matrix_data, result_string):
#     result_string += "0 0 0\n"
#     sms_file= open("../spasm/bench/bivariant_matrix1.sms","w+")
#     sms_file.write('{} {} M\n'.format(matrix_data["rows"], matrix_data["cols"]))
#     sms_file.write(result_string)
#     return sms_file
        

# Starts process of populating matrix / dictionary
def populate_matrix():
    k = 2
    global bsets, asets
    bsets = subsets(p-1+n-k,n-k)
    asets = subsets(p-1+k,k)
    generate_reference_columns(2)
    iterate_permutations(k)