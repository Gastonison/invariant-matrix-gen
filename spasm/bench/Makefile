# Makefile.in generated by automake 1.16.1 from Makefile.am.
# bench/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2018 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/spasm
pkgincludedir = $(includedir)/spasm
pkglibdir = $(libdir)/spasm
pkglibexecdir = $(libexecdir)/spasm
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-apple-darwin19.0.0
host_triplet = x86_64-apple-darwin19.0.0
bin_PROGRAMS = rank_gplu$(EXEEXT) dm$(EXEEXT) bitmap$(EXEEXT) \
	pluq$(EXEEXT) kernel$(EXEEXT) transpose$(EXEEXT) \
	stack$(EXEEXT) schur_complement$(EXEEXT) rank_hybrid$(EXEEXT) \
	vertical_swap$(EXEEXT) maximum_matching$(EXEEXT) \
	rank_dense$(EXEEXT) find_pivots$(EXEEXT) uetree$(EXEEXT) \
	mtx_reader$(EXEEXT) rref$(EXEEXT) echelonize$(EXEEXT) \
	u_checker$(EXEEXT) rref_gplu$(EXEEXT) $(am__EXEEXT_1) \
	$(am__EXEEXT_2)
#am__append_1 = metis
#am__append_2 = linbox_rank_gauss linbox_rank_wm
subdir = bench
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/fflas-ffpack-check.m4 \
	$(top_srcdir)/m4/givaro-check.m4 $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/linbox-check.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/m4/metis-check.m4 $(top_srcdir)/m4/omp-check.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/src/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
#am__EXEEXT_1 = metis$(EXEEXT)
#am__EXEEXT_2 = linbox_rank_gauss$(EXEEXT) \
#	linbox_rank_wm$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
bitmap_SOURCES = bitmap.c
bitmap_OBJECTS = bitmap.$(OBJEXT)
bitmap_LDADD = $(LDADD)
am__DEPENDENCIES_1 =
bitmap_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
dm_SOURCES = dm.c
dm_OBJECTS = dm.$(OBJEXT)
dm_LDADD = $(LDADD)
dm_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
echelonize_SOURCES = echelonize.c
echelonize_OBJECTS = echelonize.$(OBJEXT)
echelonize_LDADD = $(LDADD)
echelonize_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
find_pivots_SOURCES = find_pivots.c
find_pivots_OBJECTS = find_pivots.$(OBJEXT)
find_pivots_LDADD = $(LDADD)
find_pivots_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
kernel_SOURCES = kernel.c
kernel_OBJECTS = kernel.$(OBJEXT)
kernel_LDADD = $(LDADD)
kernel_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am__linbox_rank_gauss_SOURCES_DIST = linbox_rank_gauss.cpp
#am_linbox_rank_gauss_OBJECTS = linbox_rank_gauss-linbox_rank_gauss.$(OBJEXT)
linbox_rank_gauss_OBJECTS = $(am_linbox_rank_gauss_OBJECTS)
linbox_rank_gauss_LDADD = $(LDADD)
linbox_rank_gauss_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
linbox_rank_gauss_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(linbox_rank_gauss_CXXFLAGS) $(CXXFLAGS) \
	$(linbox_rank_gauss_LDFLAGS) $(LDFLAGS) -o $@
am__linbox_rank_wm_SOURCES_DIST = linbox_rank_wm.cpp
#am_linbox_rank_wm_OBJECTS = linbox_rank_wm-linbox_rank_wm.$(OBJEXT)
linbox_rank_wm_OBJECTS = $(am_linbox_rank_wm_OBJECTS)
linbox_rank_wm_LDADD = $(LDADD)
linbox_rank_wm_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
linbox_rank_wm_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(linbox_rank_wm_CXXFLAGS) $(CXXFLAGS) \
	$(linbox_rank_wm_LDFLAGS) $(LDFLAGS) -o $@
maximum_matching_SOURCES = maximum_matching.c
maximum_matching_OBJECTS = maximum_matching.$(OBJEXT)
maximum_matching_LDADD = $(LDADD)
maximum_matching_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am__metis_SOURCES_DIST = metis.c
#am_metis_OBJECTS = metis-metis.$(OBJEXT)
metis_OBJECTS = $(am_metis_OBJECTS)
metis_LDADD = $(LDADD)
metis_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
metis_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(metis_CFLAGS) $(CFLAGS) \
	$(metis_LDFLAGS) $(LDFLAGS) -o $@
mtx_reader_SOURCES = mtx_reader.c
mtx_reader_OBJECTS = mtx_reader.$(OBJEXT)
mtx_reader_LDADD = $(LDADD)
mtx_reader_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
pluq_SOURCES = pluq.c
pluq_OBJECTS = pluq.$(OBJEXT)
pluq_LDADD = $(LDADD)
pluq_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
rank_dense_SOURCES = rank_dense.c
rank_dense_OBJECTS = rank_dense.$(OBJEXT)
rank_dense_LDADD = $(LDADD)
rank_dense_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
rank_gplu_SOURCES = rank_gplu.c
rank_gplu_OBJECTS = rank_gplu.$(OBJEXT)
rank_gplu_LDADD = $(LDADD)
rank_gplu_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
rank_hybrid_SOURCES = rank_hybrid.c
rank_hybrid_OBJECTS = rank_hybrid.$(OBJEXT)
rank_hybrid_LDADD = $(LDADD)
rank_hybrid_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
rref_SOURCES = rref.c
rref_OBJECTS = rref.$(OBJEXT)
rref_LDADD = $(LDADD)
rref_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
rref_gplu_SOURCES = rref_gplu.c
rref_gplu_OBJECTS = rref_gplu.$(OBJEXT)
rref_gplu_LDADD = $(LDADD)
rref_gplu_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
schur_complement_SOURCES = schur_complement.c
schur_complement_OBJECTS = schur_complement.$(OBJEXT)
schur_complement_LDADD = $(LDADD)
schur_complement_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
stack_SOURCES = stack.c
stack_OBJECTS = stack.$(OBJEXT)
stack_LDADD = $(LDADD)
stack_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
transpose_SOURCES = transpose.c
transpose_OBJECTS = transpose.$(OBJEXT)
transpose_LDADD = $(LDADD)
transpose_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
u_checker_SOURCES = u_checker.c
u_checker_OBJECTS = u_checker.$(OBJEXT)
u_checker_LDADD = $(LDADD)
u_checker_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
uetree_SOURCES = uetree.c
uetree_OBJECTS = uetree.$(OBJEXT)
uetree_LDADD = $(LDADD)
uetree_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
vertical_swap_SOURCES = vertical_swap.c
vertical_swap_OBJECTS = vertical_swap.$(OBJEXT)
vertical_swap_LDADD = $(LDADD)
vertical_swap_DEPENDENCIES = $(top_builddir)/src/libspasm.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)/src
depcomp =
am__maybe_remake_depfiles =
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = bitmap.c dm.c echelonize.c find_pivots.c kernel.c \
	$(linbox_rank_gauss_SOURCES) $(linbox_rank_wm_SOURCES) \
	maximum_matching.c $(metis_SOURCES) mtx_reader.c pluq.c \
	rank_dense.c rank_gplu.c rank_hybrid.c rref.c rref_gplu.c \
	schur_complement.c stack.c transpose.c u_checker.c uetree.c \
	vertical_swap.c
DIST_SOURCES = bitmap.c dm.c echelonize.c find_pivots.c kernel.c \
	$(am__linbox_rank_gauss_SOURCES_DIST) \
	$(am__linbox_rank_wm_SOURCES_DIST) maximum_matching.c \
	$(am__metis_SOURCES_DIST) mtx_reader.c pluq.c rank_dense.c \
	rank_gplu.c rank_hybrid.c rref.c rref_gplu.c \
	schur_complement.c stack.c transpose.c u_checker.c uetree.c \
	vertical_swap.c
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/gastonmartin/Projects/Thesis/spasm/build-aux/missing aclocal-1.16
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = ar
AUTOCONF = ${SHELL} /Users/gastonmartin/Projects/Thesis/spasm/build-aux/missing autoconf
AUTOHEADER = ${SHELL} /Users/gastonmartin/Projects/Thesis/spasm/build-aux/missing autoheader
AUTOMAKE = ${SHELL} /Users/gastonmartin/Projects/Thesis/spasm/build-aux/missing automake-1.16
AWK = awk
CC = gcc
CFLAGS = -g -O2  -Wall -Wextra -fPIC
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXFLAGS = -g -O2     -Wall -Wextra -fPIC
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DLLTOOL = false
DSYMUTIL = dsymutil
DUMPBIN = 
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FFLAS_FFPACK_CXXFLAGS = 
FFLAS_FFPACK_LIBS = 
FGREP = /usr/bin/grep -F
GIVARO_CXXFLAGS = 
GIVARO_LIBS = 
GREP = /usr/bin/grep
INSTALL = /usr/local/bin/ginstall -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
LDFLAGS =   
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LINBOX_CXXFLAGS = 
LINBOX_LIBS = 
LIPO = lipo
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAINT = #
MAKEINFO = ${SHELL} /Users/gastonmartin/Projects/Thesis/spasm/build-aux/missing makeinfo
MANIFEST_TOOL = :
METIS_CFLAGS = 
METIS_LIBS = 
MKDIR_P = /usr/local/bin/gmkdir -p
NM = /usr/bin/nm -B
NMEDIT = nmedit
OBJDUMP = objdump
OBJEXT = o
OMPFLAGS = 
OTOOL = otool
OTOOL64 = :
PACKAGE = spasm
PACKAGE_BUGREPORT = charles.bouillaguet@univ-lille1.fr
PACKAGE_NAME = spasm
PACKAGE_STRING = spasm 1.2
PACKAGE_TARNAME = spasm
PACKAGE_URL = 
PACKAGE_VERSION = 1.2
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 1.2
abs_builddir = /Users/gastonmartin/Projects/Thesis/spasm/bench
abs_srcdir = /Users/gastonmartin/Projects/Thesis/spasm/bench
abs_top_builddir = /Users/gastonmartin/Projects/Thesis/spasm
abs_top_srcdir = /Users/gastonmartin/Projects/Thesis/spasm
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__leading_dot = .
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-apple-darwin19.0.0
build_alias = 
build_cpu = x86_64
build_os = darwin19.0.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-apple-darwin19.0.0
host_alias = 
host_cpu = x86_64
host_os = darwin19.0.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/gastonmartin/Projects/Thesis/spasm/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AUTOMAKE_OPTIONS = gnu
AM_CPPFLAGS = -I$(top_srcdir)/src
AM_CFLAGS = -I$(top_srcdir)/src
LDADD = -lm $(top_builddir)/src/libspasm.la $(FFLAS_FFPACK_LIBS) $(GIVARO_LIBS)
#metis_SOURCES = metis.c
#metis_LDFLAGS = $(METIS_LIBS)
#metis_CFLAGS = $(METIS_CFLAGS)
#linbox_rank_gauss_SOURCES = linbox_rank_gauss.cpp
#linbox_rank_gauss_LDFLAGS = $(LINBOX_LIBS) $(FFLAS_FFPACK_LIBS) $(GIVARO_LIBS)
#linbox_rank_gauss_CXXFLAGS = $(LINBOX_CXXFLAGS) $(FFLAS_FFPACK_CXXFLAGS) $(GIVARO_CXXFLAGS)
#linbox_rank_wm_SOURCES = linbox_rank_wm.cpp
#linbox_rank_wm_LDFLAGS = $(LINBOX_LIBS) $(FFLAS_FFPACK_LIBS) $(GIVARO_LIBS)
#linbox_rank_wm_CXXFLAGS = $(LINBOX_CXXFLAGS) $(FFLAS_FFPACK_CXXFLAGS) $(GIVARO_CXXFLAGS)
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu --ignore-deps bench/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu --ignore-deps bench/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

bitmap$(EXEEXT): $(bitmap_OBJECTS) $(bitmap_DEPENDENCIES) $(EXTRA_bitmap_DEPENDENCIES) 
	@rm -f bitmap$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(bitmap_OBJECTS) $(bitmap_LDADD) $(LIBS)

dm$(EXEEXT): $(dm_OBJECTS) $(dm_DEPENDENCIES) $(EXTRA_dm_DEPENDENCIES) 
	@rm -f dm$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(dm_OBJECTS) $(dm_LDADD) $(LIBS)

echelonize$(EXEEXT): $(echelonize_OBJECTS) $(echelonize_DEPENDENCIES) $(EXTRA_echelonize_DEPENDENCIES) 
	@rm -f echelonize$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(echelonize_OBJECTS) $(echelonize_LDADD) $(LIBS)

find_pivots$(EXEEXT): $(find_pivots_OBJECTS) $(find_pivots_DEPENDENCIES) $(EXTRA_find_pivots_DEPENDENCIES) 
	@rm -f find_pivots$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(find_pivots_OBJECTS) $(find_pivots_LDADD) $(LIBS)

kernel$(EXEEXT): $(kernel_OBJECTS) $(kernel_DEPENDENCIES) $(EXTRA_kernel_DEPENDENCIES) 
	@rm -f kernel$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(kernel_OBJECTS) $(kernel_LDADD) $(LIBS)

linbox_rank_gauss$(EXEEXT): $(linbox_rank_gauss_OBJECTS) $(linbox_rank_gauss_DEPENDENCIES) $(EXTRA_linbox_rank_gauss_DEPENDENCIES) 
	@rm -f linbox_rank_gauss$(EXEEXT)
	$(AM_V_CXXLD)$(linbox_rank_gauss_LINK) $(linbox_rank_gauss_OBJECTS) $(linbox_rank_gauss_LDADD) $(LIBS)

linbox_rank_wm$(EXEEXT): $(linbox_rank_wm_OBJECTS) $(linbox_rank_wm_DEPENDENCIES) $(EXTRA_linbox_rank_wm_DEPENDENCIES) 
	@rm -f linbox_rank_wm$(EXEEXT)
	$(AM_V_CXXLD)$(linbox_rank_wm_LINK) $(linbox_rank_wm_OBJECTS) $(linbox_rank_wm_LDADD) $(LIBS)

maximum_matching$(EXEEXT): $(maximum_matching_OBJECTS) $(maximum_matching_DEPENDENCIES) $(EXTRA_maximum_matching_DEPENDENCIES) 
	@rm -f maximum_matching$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(maximum_matching_OBJECTS) $(maximum_matching_LDADD) $(LIBS)

metis$(EXEEXT): $(metis_OBJECTS) $(metis_DEPENDENCIES) $(EXTRA_metis_DEPENDENCIES) 
	@rm -f metis$(EXEEXT)
	$(AM_V_CCLD)$(metis_LINK) $(metis_OBJECTS) $(metis_LDADD) $(LIBS)

mtx_reader$(EXEEXT): $(mtx_reader_OBJECTS) $(mtx_reader_DEPENDENCIES) $(EXTRA_mtx_reader_DEPENDENCIES) 
	@rm -f mtx_reader$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(mtx_reader_OBJECTS) $(mtx_reader_LDADD) $(LIBS)

pluq$(EXEEXT): $(pluq_OBJECTS) $(pluq_DEPENDENCIES) $(EXTRA_pluq_DEPENDENCIES) 
	@rm -f pluq$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pluq_OBJECTS) $(pluq_LDADD) $(LIBS)

rank_dense$(EXEEXT): $(rank_dense_OBJECTS) $(rank_dense_DEPENDENCIES) $(EXTRA_rank_dense_DEPENDENCIES) 
	@rm -f rank_dense$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(rank_dense_OBJECTS) $(rank_dense_LDADD) $(LIBS)

rank_gplu$(EXEEXT): $(rank_gplu_OBJECTS) $(rank_gplu_DEPENDENCIES) $(EXTRA_rank_gplu_DEPENDENCIES) 
	@rm -f rank_gplu$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(rank_gplu_OBJECTS) $(rank_gplu_LDADD) $(LIBS)

rank_hybrid$(EXEEXT): $(rank_hybrid_OBJECTS) $(rank_hybrid_DEPENDENCIES) $(EXTRA_rank_hybrid_DEPENDENCIES) 
	@rm -f rank_hybrid$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(rank_hybrid_OBJECTS) $(rank_hybrid_LDADD) $(LIBS)

rref$(EXEEXT): $(rref_OBJECTS) $(rref_DEPENDENCIES) $(EXTRA_rref_DEPENDENCIES) 
	@rm -f rref$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(rref_OBJECTS) $(rref_LDADD) $(LIBS)

rref_gplu$(EXEEXT): $(rref_gplu_OBJECTS) $(rref_gplu_DEPENDENCIES) $(EXTRA_rref_gplu_DEPENDENCIES) 
	@rm -f rref_gplu$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(rref_gplu_OBJECTS) $(rref_gplu_LDADD) $(LIBS)

schur_complement$(EXEEXT): $(schur_complement_OBJECTS) $(schur_complement_DEPENDENCIES) $(EXTRA_schur_complement_DEPENDENCIES) 
	@rm -f schur_complement$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(schur_complement_OBJECTS) $(schur_complement_LDADD) $(LIBS)

stack$(EXEEXT): $(stack_OBJECTS) $(stack_DEPENDENCIES) $(EXTRA_stack_DEPENDENCIES) 
	@rm -f stack$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(stack_OBJECTS) $(stack_LDADD) $(LIBS)

transpose$(EXEEXT): $(transpose_OBJECTS) $(transpose_DEPENDENCIES) $(EXTRA_transpose_DEPENDENCIES) 
	@rm -f transpose$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(transpose_OBJECTS) $(transpose_LDADD) $(LIBS)

u_checker$(EXEEXT): $(u_checker_OBJECTS) $(u_checker_DEPENDENCIES) $(EXTRA_u_checker_DEPENDENCIES) 
	@rm -f u_checker$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(u_checker_OBJECTS) $(u_checker_LDADD) $(LIBS)

uetree$(EXEEXT): $(uetree_OBJECTS) $(uetree_DEPENDENCIES) $(EXTRA_uetree_DEPENDENCIES) 
	@rm -f uetree$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(uetree_OBJECTS) $(uetree_LDADD) $(LIBS)

vertical_swap$(EXEEXT): $(vertical_swap_OBJECTS) $(vertical_swap_DEPENDENCIES) $(EXTRA_vertical_swap_DEPENDENCIES) 
	@rm -f vertical_swap$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(vertical_swap_OBJECTS) $(vertical_swap_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

.c.o:
	$(AM_V_CC)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -c -o $@ $<

metis-metis.o: metis.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(metis_CFLAGS) $(CFLAGS) -c -o metis-metis.o `test -f 'metis.c' || echo '$(srcdir)/'`metis.c

metis-metis.obj: metis.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(metis_CFLAGS) $(CFLAGS) -c -o metis-metis.obj `if test -f 'metis.c'; then $(CYGPATH_W) 'metis.c'; else $(CYGPATH_W) '$(srcdir)/metis.c'; fi`

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<

linbox_rank_gauss-linbox_rank_gauss.o: linbox_rank_gauss.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(linbox_rank_gauss_CXXFLAGS) $(CXXFLAGS) -c -o linbox_rank_gauss-linbox_rank_gauss.o `test -f 'linbox_rank_gauss.cpp' || echo '$(srcdir)/'`linbox_rank_gauss.cpp

linbox_rank_gauss-linbox_rank_gauss.obj: linbox_rank_gauss.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(linbox_rank_gauss_CXXFLAGS) $(CXXFLAGS) -c -o linbox_rank_gauss-linbox_rank_gauss.obj `if test -f 'linbox_rank_gauss.cpp'; then $(CYGPATH_W) 'linbox_rank_gauss.cpp'; else $(CYGPATH_W) '$(srcdir)/linbox_rank_gauss.cpp'; fi`

linbox_rank_wm-linbox_rank_wm.o: linbox_rank_wm.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(linbox_rank_wm_CXXFLAGS) $(CXXFLAGS) -c -o linbox_rank_wm-linbox_rank_wm.o `test -f 'linbox_rank_wm.cpp' || echo '$(srcdir)/'`linbox_rank_wm.cpp

linbox_rank_wm-linbox_rank_wm.obj: linbox_rank_wm.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(linbox_rank_wm_CXXFLAGS) $(CXXFLAGS) -c -o linbox_rank_wm-linbox_rank_wm.obj `if test -f 'linbox_rank_wm.cpp'; then $(CYGPATH_W) 'linbox_rank_wm.cpp'; else $(CYGPATH_W) '$(srcdir)/linbox_rank_wm.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libtool cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am uninstall-binPROGRAMS

.PRECIOUS: Makefile


%.png : %.pbm
	convert $< $@

%.png : %.pgm
	convert $< $@

%.png : %.pnm
	convert $< $@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
