import os
import subprocess
import commands
import time
import multiprocessing
from itertools import chain, combinations
from scipy.special import binom

def binomial(a,b):
    return int(binom(a,b))

def Subsets(length, size):
    s = range(1, length+1)
    return list(combinations(s, size))
    
# def Subsets(range, size):


def generate_sms(matrix_data, dic):
    items = sorted(dic.items())
    result_string = ""
    for key, val in items:
        if val != 0:
            result_string += "{} {} {}\n".format(key[0]+1, key[1]+1, val)
    result_string += "0 0 0\n"
    create_sms_file(matrix_data, result_string)

def create_sms_file(matrix_data, result_string):
    sms_file= open("spasm/bench/bivariant_matrix1.sms","w+")
    sms_file.write('{} {} M\n'.format(matrix_data["rows"], matrix_data["cols"]))
    sms_file.write(result_string)
    return sms_file

def run_spasm_rank():
    spasm_script = 'cat spasm/bench/bivariant_matrix1.sms | ./spasm/bench/rank_hybrid'
    response = commands.getstatusoutput(spasm_script)
    rank = response[1].split("s rank = ",1)[1]
    return rank

n = 0
p = 0
matrix_data = {"rows": 0, "cols": 0}
enumeration_dictionary = {}
result_dictionary = {}
result_array = []
eqn_row = 0

# Returns matrix / dictionary generated by relations
def generate_matrix(n_val, p_val):
    #sets global variables
    global n, p, result_matrix, result_dictionary, eqn_row
    n = n_val
    p = p_val
    eqn_row = 0
    generate_enumerated_permutation()
    matrix_data = generate_initial_matrix()
    result_dictionary = generate_initial_dictionary()
    
    populate_matrix()
    return matrix_data, result_dictionary

def generate_enumerated_permutation():
    timerValue = time.time()

    global enumeration_dictionary
    count = 0
    for aset in Subsets(p-1+n,n):
        alist=list(aset)
        alist.sort()
        a=[alist[i]-i-1 for i in range(n)]
        enumeration_dictionary[tuple(a)] = count
        count += 1
    print("Populating enumerated list took {} seconds".format(time.time() % timerValue))
        
def enumerate_permutation(perm):
    return enumeration_dictionary[tuple(sorted(perm))]


# MARK - This is where the matrix is changed to any other data structure
# Generates initial values for the Matrix
def generate_initial_matrix():
    nvars=binomial(p-1+n,n)
    neqs=1+sum(binomial(p-1+k,k)*binomial(p-1+n-k,n-k) for k in [2])
    return {"rows": int(neqs),"cols": int(nvars)}

# Generates initial values for the Dictionary
def generate_initial_dictionary():
    return {(0,0):1}

# Sets column values
def calculate_column_values(a, b, k):
    for i in range(k):
        a_generated = [(a[i1]-a[i])%p for i1 in range(k)]
        a_generated[i] = a[i]
        j= enumerate_permutation(a_generated+b)
        
        if (eqn_row, j) in result_dictionary:
            result_dictionary[(eqn_row,j)] = result_dictionary[(eqn_row, j)]-1/a.count(a[i])
        else:
            result_dictionary[(eqn_row,j)] = -1/a.count(a[i])
            
            
# Sets column values
# def f((a, b_eqs)):
#     pool_result_dictionary = {}
#     for b in b_eqs:
#         j=enumerate_permutation(a+b[1])
#         pool_result_dictionary[(b[0], j)] = 1
#         for i in range(2):
#             a_generated = [(a[i1]-a[i])%p for i1 in range(2)]
#             a_generated[i] = a[i]
#             j= enumerate_permutation(a_generated+b[1])

#             if (b[0], j) in pool_result_dictionary:
#                 pool_result_dictionary[(b[0],j)] = pool_result_dictionary[(b[0], j)]-1/a.count(a[i])
#             else:
#                 pool_result_dictionary[(b[0],j)] = -1/a.count(a[i])
#     return pool_result_dictionary
            
# # Iterates through all permutations of a, b
def iterate_permutations(k, handle_permutation):
    global eqn_row
    for aset in Subsets(p-1+k,k):
        alist=list(aset)
        alist.sort()
        a=[alist[i]-i-1 for i in range(k)]
        for bset in Subsets(p-1+n-k,n-k):
            eqn_row=eqn_row+1
            blist=list(bset)
            blist.sort()
            b=[blist[i]-i-1 for i in range(n-k)]
            handle_permutation(a, b, k)
            
# Iterates through all permutations of a, b
# def iterate_permutations(k, handle_permutation):
#     global eqn_row
#     pool = multiprocessing.Pool(processes = multiprocessing.cpu_count())
    
#     full_set = []
#     for aset in Subsets(p-1+k,k):
#         alist=list(aset)
#         alist.sort()
#         a=[alist[i]-i-1 for i in range(k)]
#         bs = []
#         for bset in Subsets(p-1+n-k,n-k):
#             eqn_row=eqn_row+1
#             blist=list(bset)
#             blist.sort()
#             b=[blist[i]-i-1 for i in range(n-k)]
#             bs.append((eqn_row, b))
#         full_set.append((a, bs))
#     result_dictionaries = pool.map(f, full_set)
#     result_dictionary = dict(ChainMap(*result_dictionaries))
            
# Handles what to do with each iterated permutation
def evaluate_permutation(a, b, k):
    j=enumerate_permutation(a+b)
    # result_matrix[eqn_row,j]=1
    result_dictionary[(eqn_row, j)] = 1
    calculate_column_values(a, b, k)

# Starts process of populating matrix / dictionary
def populate_matrix():
    # for k in [2]:
        iterate_permutations(2, evaluate_permutation)

        

for i in range(200,202):
    timerValue = time.time()
    matrix_data, generated_dictionary = generate_matrix(2,i)
    print("Generating Matrix took: {} seconds".format(time.time() % timerValue))

    #     dictionary solution
    timerValue = time.time()
    generate_sms(matrix_data, generated_dictionary)
    rank = run_spasm_rank()

    result = binomial(p-1+n, n)-int(rank)

    print("Computing rank took: {} seconds".format(time.time() % timerValue))
    print("{} {}".format(i, result))
    print("-------------------------")



